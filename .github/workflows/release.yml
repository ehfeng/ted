name: Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-*'

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-linux-windows:
    name: Build Linux and Windows
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.1'
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache apt packages
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: gcc-mingw-w64
          version: 1.0

      - name: Download Go dependencies
        run: go mod download

      - name: Build binaries
        run: |
          # Linux amd64
          GOOS=linux GOARCH=amd64 CGO_ENABLED=1 go build -p 4 -o ted-linux-amd64 -ldflags "-s -w" .

          # Windows amd64
          GOOS=windows GOARCH=amd64 CGO_ENABLED=1 CC=x86_64-w64-mingw32-gcc go build -p 4 -o ted-windows-amd64.exe -ldflags "-s -w" .

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-windows-binaries
          path: |
            ted-linux-amd64
            ted-windows-amd64.exe

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.1'
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download Go dependencies
        run: go mod download

      - name: Build binaries
        run: |
          # macOS amd64
          GOOS=darwin GOARCH=amd64 CGO_ENABLED=1 go build -p 4 -o ted-darwin-amd64 -ldflags "-s -w" .

          # macOS arm64
          GOOS=darwin GOARCH=arm64 CGO_ENABLED=1 go build -p 4 -o ted-darwin-arm64 -ldflags "-s -w" .

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-binaries
          path: |
            ted-darwin-amd64
            ted-darwin-arm64

  release:
    name: Create Release
    needs: [build-linux-windows, build-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract tag message
        id: tag_message
        run: |
          TAG_MESSAGE=$(git tag -l --format='%(contents)' ${GITHUB_REF#refs/tags/})
          if [ -z "$TAG_MESSAGE" ]; then
            echo "No annotated tag message found, will use auto-generated notes"
            echo "use_tag_message=false" >> $GITHUB_OUTPUT
          else
            echo "use_tag_message=true" >> $GITHUB_OUTPUT
            echo "tag_message<<EOF" >> $GITHUB_OUTPUT
            echo "$TAG_MESSAGE" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}

          mv artifacts/linux-windows-binaries/* .
          mv artifacts/macos-binaries/* .

          # Package binaries into tar.gz with proper naming
          tar -czf ted_${VERSION}_Linux_amd64.tar.gz ted-linux-amd64
          tar -czf ted_${VERSION}_Darwin_amd64.tar.gz ted-darwin-amd64
          tar -czf ted_${VERSION}_Darwin_arm64.tar.gz ted-darwin-arm64
          zip ted_${VERSION}_Windows_amd64.zip ted-windows-amd64.exe

          # Create checksums for the archives
          sha256sum ted_${VERSION}_*.tar.gz ted_${VERSION}_*.zip > checksums.txt

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: ${{ contains(github.ref, '-') }}
          body: ${{ steps.tag_message.outputs.use_tag_message == 'true' && steps.tag_message.outputs.tag_message || '' }}
          generate_release_notes: ${{ steps.tag_message.outputs.use_tag_message == 'false' }}
          files: |
            ted_*_Linux_amd64.tar.gz
            ted_*_Darwin_amd64.tar.gz
            ted_*_Darwin_arm64.tar.gz
            ted_*_Windows_amd64.zip
            checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
